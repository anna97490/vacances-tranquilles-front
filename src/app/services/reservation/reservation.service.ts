// Service pour la gestion des r√©servations
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConfigService } from '../config/config.service';

// Interfaces pour les donn√©es de r√©servation
export interface ReservationDTO {
  startDate: string;
  endDate: string;
  propertyId: number;
  services: string[];
  comments?: string;
}

export interface ReservationResponseDTO {
  id: number;
  reservationDate: string;
  startDate: string;
  endDate: string;
  status: 'PENDING' | 'IN_PROGRESS' | 'CLOSED' | 'CANCELLED';
  totalPrice: number;

  // Informations sur les utilisateurs
  clientId: number;
  clientName: string;
  clientEmail: string;
  providerId: number;
  providerName: string;
  providerEmail: string;

  // Informations sur le service
  serviceId: number;
  serviceName: string;
  serviceDescription: string;

  // Informations sur le paiement
  paymentId?: number;
  paymentStatus?: string;

  // Champs additionnels pour l'affichage
  propertyName: string;
  propertyAddress?: string;
  comments?: string;
  services: string[];

  // Timestamps
  createdAt: string;
  updatedAt: string;
}

export interface UpdateReservationStatusDTO {
  status: string;
}

@Injectable({
  providedIn: 'root'
})
export class ReservationService {

  constructor(
    private http: HttpClient,
    private configService: ConfigService
  ) {}

  /**
   * R√©cup√®re toutes les r√©servations de l'utilisateur authentifi√©
   * @returns Observable contenant la liste des r√©servations
   */
  getAllReservations(): Observable<ReservationResponseDTO[]> {
    const apiUrl = this.configService.apiUrl;
    const url = `${apiUrl}/reservations`;
    console.log('üåê Appel API - URL:', url);
    console.log('üîß API URL configur√©e:', apiUrl);
    return this.http.get<ReservationResponseDTO[]>(url);
  }

  /**
   * R√©cup√®re une r√©servation sp√©cifique par son ID
   * @param id L'identifiant de la r√©servation
   * @returns Observable contenant la r√©servation
   */
  getReservationById(id: number): Observable<ReservationResponseDTO> {
    const apiUrl = this.configService.apiUrl;
    return this.http.get<ReservationResponseDTO>(`${apiUrl}/reservations/${id}`);
  }

  /**
   * Cr√©e une nouvelle r√©servation
   * @param reservationData Les donn√©es de la r√©servation √† cr√©er
   * @returns Observable contenant la r√©servation cr√©√©e
   */
  createReservation(reservationData: ReservationDTO): Observable<ReservationResponseDTO> {
    const apiUrl = this.configService.apiUrl;
    return this.http.post<ReservationResponseDTO>(`${apiUrl}/reservations`, reservationData);
  }

  /**
   * Met √† jour le statut d'une r√©servation (pour les prestataires)
   * @param id L'identifiant de la r√©servation
   * @param statusData Les donn√©es de mise √† jour du statut
   * @returns Observable contenant la r√©servation mise √† jour
   */
  updateReservationStatus(id: number, statusData: UpdateReservationStatusDTO): Observable<ReservationResponseDTO> {
    const apiUrl = this.configService.apiUrl;
    return this.http.patch<ReservationResponseDTO>(`${apiUrl}/reservations/${id}/status`, statusData);
  }

  /**
   * Supprime une r√©servation (si autoris√©)
   * @param id L'identifiant de la r√©servation √† supprimer
   * @returns Observable de la r√©ponse HTTP
   */
  deleteReservation(id: number): Observable<HttpResponse<any>> {
    const apiUrl = this.configService.apiUrl;
    return this.http.delete(`${apiUrl}/reservations/${id}`, { observe: 'response' });
  }

  /**
   * R√©cup√®re les r√©servations avec filtres optionnels
   * @param filters Objet contenant les filtres (statut, dates, etc.)
   * @returns Observable contenant la liste filtr√©e des r√©servations
   */
  getReservationsWithFilters(filters: {
    status?: string;
    startDate?: string;
    endDate?: string;
    propertyId?: number;
  }): Observable<ReservationResponseDTO[]> {
    const apiUrl = this.configService.apiUrl;
    const params = new URLSearchParams();

    if (filters.status) params.append('status', filters.status);
    if (filters.startDate) params.append('startDate', filters.startDate);
    if (filters.endDate) params.append('endDate', filters.endDate);
    if (filters.propertyId) params.append('propertyId', filters.propertyId.toString());

    const queryString = params.toString();
    const url = queryString ? `${apiUrl}/reservations?${queryString}` : `${apiUrl}/reservations`;

    return this.http.get<ReservationResponseDTO[]>(url);
  }

  /**
   * R√©cup√®re les statistiques des r√©servations
   * @returns Observable contenant les statistiques
   */
  getReservationStats(): Observable<{
    total: number;
    pending: number;
    inProgress: number;
    completed: number;
    cancelled: number;
  }> {
    const apiUrl = this.configService.apiUrl;
    return this.http.get<{
      total: number;
      pending: number;
      inProgress: number;
      completed: number;
      cancelled: number;
    }>(`${apiUrl}/reservations/stats`);
  }
}
